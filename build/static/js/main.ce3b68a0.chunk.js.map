{"version":3,"sources":["Message.js","firebase.js","App.js","reportWebVitals.js","index.js"],"names":["Message","React","forwardRef","ref","username","message","isUser","className","Card","CardContent","Typography","color","variant","component","data","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","prompt","src","FormControl","InputLabel","Input","placeholder","value","onChange","event","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAoBeA,G,MAhBCC,IAAMC,YAAW,WAAqBC,GAAS,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,QAC/BC,EAASF,IAAaC,EAAQD,SAExC,OACI,qBAAKD,IAAKA,EAAKI,UAAS,kBAAaD,GAAU,iBAA/C,SACI,cAACE,EAAA,EAAD,CAAMD,UAAWD,EAAS,oBAAqB,qBAA/C,SACI,cAACG,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAYC,MAAM,cAAcC,QAAQ,KAAKC,UAAU,KAAvD,WACUP,GAAD,UAAcD,EAAQD,UAAa,YAAnC,MADT,IAC8DC,EAAQS,kB,iECY3EC,G,MArBQC,IAASC,cAAc,CAC1CC,OAAQ,0CACRC,WAAY,0CACZC,UAAW,0BACXC,cAAe,sCACfC,kBAAmB,eACnBC,MAAO,8CAGaC,aC0DTC,MAzDf,WAAgB,IAAD,EACaxB,IAAMyB,SAAS,IAD5B,mBACNC,EADM,KACCC,EADD,OAEmB3B,IAAMyB,SAAS,IAFlC,mBAENG,EAFM,KAEIC,EAFJ,OAGmB7B,IAAMyB,SAAS,IAHlC,mBAGNtB,EAHM,KAGI2B,EAHJ,KAkCb,OAzBA9B,IAAM+B,WAAU,WAEdjB,EAAGkB,WAAW,YAAYC,QAAQ,YAAa,QAC9CC,YAAW,SAAAC,GACVN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAInC,QAASkC,EAAIzB,iBAEjE,IAEHb,IAAM+B,WAAU,WACdD,EAAYU,OAAO,0BAClB,IAgBD,sBAAKlC,UAAU,MAAf,UACE,qBAAKmC,IAAI,gDACP,+CACA,0CAAatC,KACb,cAAC,IAAD,UACGyB,EAASS,KAAI,gBAAEE,EAAF,EAAEA,GAAGnC,EAAL,EAAKA,QAAL,OACZ,cAAC,EAAD,CAAkBD,SAAUA,EAAUC,QAASA,GAAjCmC,QAGlB,sBAAMjC,UAAU,YAAhB,SACE,eAACoC,EAAA,EAAD,CAAapC,UAAU,mBAAvB,UACE,cAACqC,EAAA,EAAD,iCACA,cAACC,EAAA,EAAD,CAAOtC,UAAU,aAAauC,YAAY,kBAAkBC,MAAOpB,EAAOqB,SAAU,SAAAC,GAAK,OAAIrB,EAASqB,EAAMC,OAAOH,UACnH,cAACI,EAAA,EAAD,CAAY5C,UAAU,kBAAkBK,QAAQ,YAAYD,MAAM,UAAUyC,UAAWzB,EAAO0B,KAAK,SAASC,QA3BlG,SAACL,GACnBA,EAAMM,iBAENxC,EAAGkB,WAAW,YAAYuB,IAAI,CAC5B1C,KAAMa,EACNvB,SAAUA,EACVqD,UAAWzC,IAASQ,UAAUkC,WAAWC,oBAI3C/B,EAAS,KAiBD,SACE,cAAC,IAAD,eClDCgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ce3b68a0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardContent, Typography} from '@material-ui/core';\r\nimport './Message.css';\r\n\r\nconst Message = React.forwardRef(({username, message},ref) => {\r\n        const isUser = username === message.username;\r\n\r\n    return (\r\n        <div ref={ref} className={`message ${isUser && 'message__user'}`}>\r\n            <Card className={isUser ? \"message__userCard\": \"message__guestCard\" }>\r\n                <CardContent>\r\n                    <Typography color=\"textPrimary\" variant=\"h5\" component=\"h2\">\r\n                            {!isUser && `${message.username  || 'Anonymous'}: `} {message.data}\r\n                        </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default Message;","import firebase from \"firebase\";\r\nimport '@firebase/firestore';\r\n\r\nconst firebaseConfig = firebase.initializeApp({\r\n    apiKey: \"AIzaSyCvZgIQfxZ71UTpTi2fSqBBWAY5q6J_Bp4\",\r\n    authDomain: \"fastmessanger-bodyan359.firebaseapp.com\",\r\n    projectId: \"fastmessanger-bodyan359\",\r\n    storageBucket: \"fastmessanger-bodyan359.appspot.com\",\r\n    messagingSenderId: \"436591331981\",\r\n    appId: \"1:436591331981:web:7d5d427ee13863423770c4\"\r\n  });\r\n\r\nlet db = firebaseConfig.firestore();\r\n\r\n// //initiating references to the databases\r\n// const usersRef = db.collection('users');\r\n\r\n// // for privileges purposes\r\n// const functions = firebase.functions();\r\n\r\n// //google provider sign-in\r\n// const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n\r\n\r\nexport default db;","import React from 'react';\n\nimport './App.css';\nimport Message from './Message';\n\nimport { Button, FormControl, InputLabel, Input, IconButton} from '@material-ui/core';\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\nimport Icon from '@material-ui/core/Icon';\n\nimport db from './firebase';\nimport firebase from 'firebase';\n\nfunction App() {\n  const [input, setInput] = React.useState('');\n  const [messages, setMessages] = React.useState([]);\n  const [username, setUsername] = React.useState('');\n\n  // console.log('input',input);\n  // console.log('messages',messages);\n\n  //adding to db\n  React.useEffect(() => {\n    // run once when the app component loads\n    db.collection('messages').orderBy('timestamp', 'desc')\n    .onSnapshot(snapshot => {\n      setMessages(snapshot.docs.map(doc => ({id: doc.id, message: doc.data()})));\n    });\n  }, []);\n\n  React.useEffect(() => {\n    setUsername(prompt('Enter your nickname'));\n  }, []);\n\n  const sendMessage = (event) => {\n    event.preventDefault(); //dont refresh page on clicking 'enter'\n\n    db.collection('messages').add({\n      data: input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n\n    // setMessages([...messages, {username: username, text: input}]);\n    setInput('');\n  };\n\n  return (\n    <div className=\"App\">\n      <img src=\"https://web.telegram.org/img/logo_share.png\" />\n        <h1>FastMessenger</h1>\n        <h2>Welcome {username}</h2>\n        <FlipMove>\n          {messages.map(({id,message}) => (\n            <Message key={id} username={username} message={message}/>\n          ))}\n        </FlipMove>\n        <form className=\"app__form\">\n          <FormControl className=\"app__formControl\">\n            <InputLabel >Enter a message...</InputLabel>\n            <Input className=\"app__input\" placeholder='Enter a message' value={input} onChange={event => setInput(event.target.value)} />\n            <IconButton className=\"app__iconButton\" variant=\"contained\" color=\"primary\" disabled={!input} type='submit' onClick={sendMessage}>\n              <SendIcon />\n            </IconButton>\n          </FormControl>\n        </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}